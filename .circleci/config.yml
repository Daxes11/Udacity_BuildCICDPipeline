version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: install aws cli
          when: on_fail
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
            awscli \
            && rm -rf /var/cache/apk/*
      - run: 
          name: Empty S3 bucket
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "UdaPeopleProjectBackend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "UdaPeopleProjectFrontend-${CIRCLE_WORKFLOW_ID:0:7}"


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 1b3cb2c9-8aaa-419a-8b3a-661b88e8ccea" --request GET https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
  

orbs:
  slack: circleci/slack@3.4.2


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: 
            - frontend/node_modules
            - frontend/dist
          key: frontend-build
      - slack/status:
          fail_only: true
          mentions: "circleci"

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist
          key: backend-build
      - slack/status:
          fail_only: true
          mentions: "circleci"

  test-frontend:
    docker:
      - image: circleci/node:stretch
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install oauth-sign
            npm run test
      - slack/status:
          fail_only: true
          mentions: "circleci"

  test-backend:
    docker:
      - image: circleci/node:stretch
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
             cd backend
             npm run test
      - slack/status:
          fail_only: true
          mentions: "circleci"
            

  scan-frontend:
    docker:
      - image: circleci/node:stretch
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Front-end
          command: |
              cd frontend
              npm audit fix --audit-level=critical
              npm audit --audit-level=critical
      - slack/status:
          fail_only: true
          mentions: "circleci"


  scan-backend:
    docker:
      - image: circleci/node:stretch
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
              cd backend
              npm audit fix --audit-level=critical
              npm audit --audit-level=critical
      - slack/status:
          fail_only: true
          mentions: "circleci"


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=UdaPeopleProject \
              --stack-name "UdaPeopleProjectBackend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
            PublicDNS=$(aws cloudformation describe-stacks \
              --stack-name "UdaPeopleProjectBackend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Stacks[0].Outputs[?OutputKey=='PublicDNS'].OutputValue" --output text)
            curl -H "Content-Type: text/plain" -H "token: 1b3cb2c9-8aaa-419a-8b3a-661b88e8ccea" --request PUT --data "$PublicDNS" https://api.memstash.io/values/PublicDNS
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=UdaPeopleProject \
              --stack-name "UdaPeopleProjectFrontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            PublicDNS=$(curl -H "token: 1b3cb2c9-8aaa-419a-8b3a-661b88e8ccea" --request GET https://api.memstash.io/values/PublicDNS)
            echo $PublicDNS >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Install missing packages
          command: |
           yum install tar gzip -y
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack/status:
          fail_only: true
          mentions: "circleci"

#      # Here's where you will add some code to rollback on failure  
#      - destroy-environment 
#      - revert-migrations


  configure-infrastructure:
    docker:
      - image: python:3.9.4-alpine3.13
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["99:1b:da:1d:0e:9d:8a:d5:45:4e:59:2c:03:f7:01:a8"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible  
      - run:
          name: Configure environment variables
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/

#     # Here's where you will add some code to rollback on failure  
#     - destroy-environment 
#     - revert-migrations         

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations-output.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if (grep -q "has been executed successfully" migrations-output.txt) 
            then curl -H "Content-Type: text/plain" -H "token: 1b3cb2c9-8aaa-419a-8b3a-661b88e8ccea" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}; 
            else curl -H "Content-Type: text/plain" -H "token: 1b3cb2c9-8aaa-419a-8b3a-661b88e8ccea" --request PUT --data "-1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7};
            fi

#     # Here's where you will add some code to rollback on failure      
#     - destroy-environment  
#     - revert-migrations

  deploy-frontend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: frontend-build
      - run:
          name: Install dependencies
          command: |
           cd frontend
           npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 1b3cb2c9-8aaa-419a-8b3a-661b88e8ccea" --request GET https://api.memstash.io/values/PublicDNS)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL="${API_URL}" >> "frontend/.env"
            cat frontend/.env

            cd frontend
            npm run build
      - run: 
          name: Copy files to S3 frontend bucket
          command: |
             aws s3 cp ./frontend/dist/ "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive

#     # Here's where you will add some code to rollback on failure
#     - destroy-environment
#     - revert-migrations    
                    
  deploy-backend:
    docker:
      - image: python:3.9.4-alpine3.13
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: backend-build
      - add_ssh_keys:
          fingerprints: ["99:1b:da:1d:0e:9d:8a:d5:45:4e:59:2c:03:f7:01:a8"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update nodejs nodejs-npm
            apk add --update tar gzip curl
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -vczf udapeople.backend ./backend/

            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

#      # Here's where you will add some code to rollback on failure
#      - destroy-environment
#      - revert-migrations


  smoke-test:
    docker:
      - image: python:3.9.4-alpine3.13
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: 1b3cb2c9-8aaa-419a-8b3a-661b88e8ccea" --request GET https://api.memstash.io/values/PublicDNS)
            STATUS_URL="http://${BACKEND_IP}:3030/api/status"

            if curl -s ${STATUS_URL} | grep "\"status\":\"ok\""
            then
            echo "Backend OK"
            else
            exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"

            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
            echo "Frontend OK"
            else
            exit 1
            fi

#     # Here's where you will add some code to rollback on failure 
#      - destroy-environment
#      - revert-migrations


  cloudfront-update:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --tags project=UdaPeopleProject \
            --stack-name "UdaPeopleProject" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"

#      # Here's where you will add some code to rollback on failure  
#       - destroy-environment
#       - revert-migrations

  cleanup:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo OldWorkflowID: "${OldWorkflowID}"  
            echo Current Stacks:  "${STACKS}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name "UdaPeopleProjectBackend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "UdaPeopleProjectFrontend-${OldWorkflowID}"
            fi

#     # Here's where you will add some code to rollback on failure 
#      - destroy-environment
#      - revert-migrations        

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]            
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
