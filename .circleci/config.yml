version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

orbs:
  slack: circleci/slack@3.4.2
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:stretch
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install oauth-sign
            npm run test

  test-backend:
    docker:
      - image: circleci/node:stretch
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
              cd backend
              npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:stretch
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Front-end
          command: |
              cd frontend
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
      - slack/status:
          fail_only: true
          mentions: "circleci"

  scan-backend:
    docker:
      - image: circleci/node:stretch
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
              cd backend
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
      - slack/status:
          fail_only: true
          mentions: "circleci"

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=UdaPeopleProject \
              --stack-name "UdaPeopleProjectBackend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
            PublicDNS=$(aws cloudformation describe-stacks \
              --stack-name "UdaPeopleProjectBackend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Stacks[0].Outputs[?OutputKey=='PublicDNS'].OutputValue" --output text)
            curl -H "Content-Type: text/plain" -H "token: 1b3cb2c9-8aaa-419a-8b3a-661b88e8ccea" --request PUT --data "$PublicDNS" https://api.memstash.io/values/PublicDNS
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=UdaPeopleProject \
              --stack-name "UdaPeopleProjectFrontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            PublicDNS=$(curl -H "token: 1b3cb2c9-8aaa-419a-8b3a-661b88e8ccea" --request GET https://api.memstash.io/values/PublicDNS)
            echo $PublicDNS >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run: yum install tar gzip -y
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
#      # Here's where you will add some code to rollback on failure   
#      - run:
#          name: Upload Failed Tests
#          name: on error
#          command: echo "Hello Error!"
#          command: curl --data fail_tests.log http://example.com/error_logs
#          when: on_fail   

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9.4-alpine3.13
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - attach_workspace:
          at:
            - ~/
      - add_ssh_keys:
          fingerprints: ["99:1b:da:1d:0e:9d:8a:d5:45:4e:59:2c:03:f7:01:a8"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      - run:
          name: Configure environment variables
          command: |
            echo $ENVIRONMENT
            echo $TYPEORM_CONNECTION
            echo $TYPEORM_ENTITIES
            echo $TYPEORM_HOST
            echo $TYPEORM_PORT
          environment:
            ENVIRONMENT: production
            TYPEORM_CONNECTION: postgres
            TYPEORM_ENTITIES: ./src/modules/domain/**/*.entity.ts
            TYPEORM_HOST: udapeopleprod.ceoufwkkeobm.us-east-1.rds.amazonaws.com
            TYPEORM_PORT: 5532

      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations

      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

#  deploy-frontend:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#            export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
#      - run:
#          name: Deploy frontend objects
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure      
#                    
#  deploy-backend:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Deploy backend
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#  smoke-test:
#    docker:
#      # Lightweight Docker image 
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
#            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#cleanup:
#    docker:
#      # Docker image here
#    steps:
#      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
#            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#              # your code here
#            fi
#            

workflows:
  default:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
         filters:
            branches:
#              only:  [test-feature-branch]
               only:  [master]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#      - run-migrations:
#          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]